{"ast":null,"code":"//import decode from 'jwt-decode';\nclass AuthService {\n  // retrieve data saved in token\n  getProfile() {\n    return decode(this.getToken());\n  } // check if the user is still logged in\n\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken(); // use type coersion to check if token is NOT undefined and the token is NOT expired\n\n    return !!token && !this.isTokenExpired(token);\n  } // check if the token has expired\n\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (err) {\n      return false;\n    }\n  } // retrieve token from localStorage\n\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  } // set token to localStorage and reload page to homepage\n\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  } // clear token from localStorage and force logout with reload\n\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token'); // this will reload the page and reset the state of the application\n\n    window.location.assign('/');\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/damic/OneDrive/Desktop/haul-that/client/src/utils/auth.js"],"names":["AuthService","getProfile","decode","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem"],"mappings":"AAAA;AAEA,MAAMA,WAAN,CAAkB;AACd;AACAC,EAAAA,UAAU,GAAG;AACT,WAAOC,MAAM,CAAC,KAAKC,QAAL,EAAD,CAAb;AACD,GAJW,CAMZ;;;AACAC,EAAAA,QAAQ,GAAG;AACT;AACA,UAAMC,KAAK,GAAG,KAAKF,QAAL,EAAd,CAFS,CAGT;;AACA,WAAO,CAAC,CAACE,KAAF,IAAW,CAAC,KAAKC,cAAL,CAAoBD,KAApB,CAAnB;AACD,GAZW,CAcZ;;;AACAC,EAAAA,cAAc,CAACD,KAAD,EAAQ;AACpB,QAAI;AACF,YAAME,OAAO,GAAGL,MAAM,CAACG,KAAD,CAAtB;;AACA,UAAIE,OAAO,CAACC,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnC,eAAO,IAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF,KAPD,CAOE,OAAOC,GAAP,EAAY;AACZ,aAAO,KAAP;AACD;AACF,GA1BW,CA4BZ;;;AACAR,EAAAA,QAAQ,GAAG;AACT;AACA,WAAOS,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAP;AACD,GAhCW,CAkCZ;;;AACAC,EAAAA,KAAK,CAACC,OAAD,EAAU;AACb;AACAH,IAAAA,YAAY,CAACI,OAAb,CAAqB,UAArB,EAAiCD,OAAjC;AAEAE,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD,GAxCW,CA0CZ;;;AACAC,EAAAA,MAAM,GAAG;AACP;AACAR,IAAAA,YAAY,CAACS,UAAb,CAAwB,UAAxB,EAFO,CAGP;;AACAJ,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuB,GAAvB;AACD;;AAhDW;;AAmDlB,eAAe,IAAInB,WAAJ,EAAf","sourcesContent":["//import decode from 'jwt-decode';\r\n\r\nclass AuthService {\r\n    // retrieve data saved in token\r\n    getProfile() {\r\n        return decode(this.getToken());\r\n      }\r\n    \r\n      // check if the user is still logged in\r\n      loggedIn() {\r\n        // Checks if there is a saved token and it's still valid\r\n        const token = this.getToken();\r\n        // use type coersion to check if token is NOT undefined and the token is NOT expired\r\n        return !!token && !this.isTokenExpired(token);\r\n      }\r\n    \r\n      // check if the token has expired\r\n      isTokenExpired(token) {\r\n        try {\r\n          const decoded = decode(token);\r\n          if (decoded.exp < Date.now() / 1000) {\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n        } catch (err) {\r\n          return false;\r\n        }\r\n      }\r\n    \r\n      // retrieve token from localStorage\r\n      getToken() {\r\n        // Retrieves the user token from localStorage\r\n        return localStorage.getItem('id_token');\r\n      }\r\n    \r\n      // set token to localStorage and reload page to homepage\r\n      login(idToken) {\r\n        // Saves user token to localStorage\r\n        localStorage.setItem('id_token', idToken);\r\n    \r\n        window.location.assign('/');\r\n      }\r\n    \r\n      // clear token from localStorage and force logout with reload\r\n      logout() {\r\n        // Clear user token and profile data from localStorage\r\n        localStorage.removeItem('id_token');\r\n        // this will reload the page and reset the state of the application\r\n        window.location.assign('/');\r\n      }\r\n}\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}